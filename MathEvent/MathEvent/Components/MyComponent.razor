
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using MathEvent.Models.ViewModels
@using System.Net.Http
@using System.ComponentModel
@using Newtonsoft.Json
@using System.Text
@inject NavigationManager NavigationManager
<div class="container">
    <div class="row d-flex align-items-center">
        <input type="button" class="btn btn-lg btn-success" @onclick="SignUp" value="@CurrentButtonValue()" />
        <h5 class="ml-4">Участников: @Count()</h5>
    </div>
</div>

@code {
    [Parameter] public CardViewModel card { get; set; }
    [Parameter] public int traffic { get; set; }

    //int count = 0;

    protected async Task SignUp()
    {
        var model = JsonConvert.SerializeObject(card);
        var content = new StringContent(model, Encoding.UTF8, "application/json");
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:44305/");

        if (!card.IsSignedUp)
        {
            //current = "Отписаться";
            traffic++;
            card.IsSignedUp = !card.IsSignedUp;
        }
        else
        {
            traffic--;
            //current = "Записаться";
            card.IsSignedUp = !card.IsSignedUp;
        }

        var response = await client.PostAsync("api/Subscribe/signup", content);
        //var c = await client.GetAsync($"https://localhost:44305/api/Subscribe?id={id}&userId={userId}");
        //NavigationManager.NavigateTo("https://localhost:44305/Home/Index", true);

        Count();
    }

    protected int Count()
    {
        return traffic;
    }

    protected string CurrentButtonValue()
    {
        if (card.IsSignedUp)
        {
            return "Отписаться";
        }
        else
        {
            return "Записаться";
        }
    }
}