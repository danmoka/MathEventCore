@using System.Net.Http
@using System.Text
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using MathEvent.Models
@using MathEvent.Models.ViewModels
@using MathEvent.Helpers
@using Microsoft.AspNetCore.Mvc
@using MathEvent.Components

@inject NavigationManager NavigationManager
@inject ClientService ClientService

<div class="container bg-light box-shadow mt-4 mb-2">
    <div class="row d-flex justify-content-between py-1">
        <div class="d-inline-flex">
            <select class="form-control btn btn-secondary mr-2" value="@Type" @onchange="@ChangeType">
                <option value="Любой">Любой</option>
                <option value="Доклад">Доклад</option>
                <option value="Мастер-класс">Мастер-класс</option>
                <option value="Семинар">Семинар</option>
            </select>
            <select class="form-control btn btn-secondary" value="@Period" @onchange="@ChangePeriod">
                <option value="За всё время">За всё время</option>
                <option value="Сегодня">Сегодня</option>
                <option value="В этом месяце">В этом месяце</option>
                <option value="В этом году">В этом году</option>
            </select>
        </div>
        <div class="form-inline d-flex justify-content-center md-form form-sm search-2 mt-1 text-right">
            <i class="fa fa-search" aria-hidden="true" @onclick="@Search"></i>
            <input class="form-control form-control-sm ml-3 w-75" type="text" placeholder="Поиск" aria-label="Поиск" @bind="@SearchString" @onkeyup="@EnterClick">
        </div>
    </div>
</div>
@{
    if (Performances.Count() < 1)
    {
        <div class="container">
            <div class="row d-flex justify-content-center">
                <div class="col-md-5">
                    <NotFoundComponent Comment="Нет событий, удовлетворяющих фильтрам"></NotFoundComponent>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card-columns">
            @foreach (var item in Performances)
            {
                var id = item.Id;
                <div class="card">
                    <img class="card-img-top" src="@UserDataPathWorker.ConcatPaths(item.DataPath, item.PosterName)" />
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        @if (!IsKeyWordsHidden)
                        {
                            <h6 class="card-text">@item.KeyWords</h6>
                        }
                        <button @onclick="@(() => GoToCard(id))" class="btn btn-primary">Подробнее</button>
                    </div>
                    <div class="card-footer">
                        <div class="row d-flex align-items-center">
                            <div class="col-md-5 text-center text-md-left mb-4 mb-md-0">
                                <small class="text-muted">Начало @item.Start.ToString("dd/MM/yyyy")</small>
                            </div>
                            <div class="col-md-7 text-center text-md-right">
                                <small class="text-muted">@item.Location</small>
                            </div>
                        </div>
                        
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public List<PerformanceViewModel> Performances { get; set; }
    [Parameter]
    public bool IsKeyWordsHidden { get; set; }
    private List<PerformanceViewModel> _performancesOriginal = null;
    public string Type { get; set; } = "Любой";
    public string Period { get; set; } = "За всё время";
    public string SearchString { get; set; } = "";
    private HttpClient _client;

    protected override void OnInitialized()
    {
        _client = ClientService.Client;

        if (_performancesOriginal == null)
        {
            _performancesOriginal = Performances;
        }
    }

    public void GoToCard(int id)
    {
        NavigationManager.NavigateTo($"{_client.BaseAddress}Performance/Card?id={id}", true);
    }

    public async Task ChangeType(ChangeEventArgs e)
    {
        Type = e.Value.ToString();
        await Filter();
    }

    public async Task ChangePeriod(ChangeEventArgs e)
    {
        Period = e.Value.ToString();
        await Filter();
    }

    public async Task EnterClick(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Enter")
        {
            await Search();
        }
    }

    public async Task Search()
    {
        var filteredCards = _performancesOriginal;
        Type = "Любой";
        Period = "За всё время";
        Performances = await FilterAction(_performancesOriginal, this.SearchString, "api/Filter/search");
    }

    public async Task Filter()
    {
        SearchString = "";

        var filteredCards = _performancesOriginal;
        if (Type != "Любой")
        {
            filteredCards = await FilterAction(filteredCards, Type, "api/Filter/type");
        }

        if (Period != "За всё время")
        {
            filteredCards = await FilterAction(filteredCards, Period, "api/Filter/period");
        }

        Performances = filteredCards;
    }

    private async Task<List<PerformanceViewModel>> FilterAction(List<PerformanceViewModel> cardViewModels, string parameter, string route)
    {
        var filterViewModel = new FilterCardViewModel
        {
            Cards = cardViewModels,
            FilterPatameter = parameter
        };

        var model = JsonConvert.SerializeObject(filterViewModel);
        var content = new StringContent(model, Encoding.UTF8, "application/json");

        var response = await _client.PostAsync($"{route}", content);
        var responseResult = await response.Content.ReadAsStringAsync();
        filterViewModel = JsonConvert.DeserializeObject<FilterCardViewModel>(responseResult);

        return filterViewModel.Cards;
    }
}

